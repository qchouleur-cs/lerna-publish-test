"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeDiffPredicate = void 0;
const npmlog_1 = __importDefault(require("npmlog"));
const minimatch_1 = __importDefault(require("minimatch"));
const path_1 = __importDefault(require("path"));
const slash_1 = __importDefault(require("slash"));
const child_process_1 = require("../../../child-process");
/**
 * @param {string} committish
 * @param {import("@lerna/child-process").ExecOpts} execOpts
 * @param {string[]} ignorePatterns
 */
function makeDiffPredicate(committish, execOpts, ignorePatterns = []) {
    const ignoreFilters = new Set(ignorePatterns.map((p) => minimatch_1.default.filter(`!${p}`, {
        matchBase: true,
        // dotfiles inside ignored directories should also match
        dot: true,
    })));
    if (ignoreFilters.size) {
        npmlog_1.default.info('ignoring diff in paths matching', ignorePatterns.join(' '));
    }
    return function hasDiffSinceThatIsntIgnored(/** @type {import("@lerna/package-graph").PackageGraphNode} */ node) {
        const diff = diffSinceIn(committish, node.location, execOpts);
        if (diff === '') {
            npmlog_1.default.silly('', 'no diff found in %s', node.name);
            return false;
        }
        npmlog_1.default.silly('found diff in', diff);
        let changedFiles = diff.split('\n');
        if (ignoreFilters.size) {
            for (const ignored of ignoreFilters) {
                changedFiles = changedFiles.filter(ignored);
            }
        }
        if (changedFiles.length) {
            npmlog_1.default.verbose('filtered diff', changedFiles.join(' '));
        }
        else {
            npmlog_1.default.verbose('', 'no diff found in %s (after filtering)', node.name);
        }
        return changedFiles.length > 0;
    };
}
exports.makeDiffPredicate = makeDiffPredicate;
/**
 * @param {string} committish
 * @param {string} location
 * @param {import("@lerna/child-process").ExecOpts} opts
 */
function diffSinceIn(committish, location, opts) {
    const args = ['diff', '--name-only', committish];
    const formattedLocation = (0, slash_1.default)(path_1.default.relative(opts.cwd, location));
    if (formattedLocation) {
        // avoid same-directory path.relative() === ""
        args.push('--', formattedLocation);
    }
    npmlog_1.default.silly('checking diff', formattedLocation);
    return (0, child_process_1.execSync)('git', args, opts);
}
//# sourceMappingURL=make-diff-predicate.js.map