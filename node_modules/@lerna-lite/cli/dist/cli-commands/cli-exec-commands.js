"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const filter_options_1 = require("../filter-options");
/**
 * @see https://github.com/yargs/yargs/blob/master/docs/advanced.md#providing-a-command-module
 */
exports.default = {
    command: 'exec [cmd] [args..]',
    describe: 'Execute an arbitrary command in each package',
    builder: (yargs) => {
        yargs
            .example('$0 exec ls -- --la', '# execute `ls -la` in all packages')
            .example('$0 exec -- ls --la', '# execute `ls -la` in all packages, keeping cmd outside')
            .parserConfiguration({
            'populate--': true,
        })
            .positional('cmd', {
            describe: 'The command to execute. Any command flags must be passed after --',
            type: 'string',
        })
            .positional('args', {
            describe: 'Positional arguments (not recognized by lerna) to send to command',
            type: 'string',
        })
            .options({
            stream: {
                group: 'Command Options:',
                describe: 'Stream output with lines prefixed by originating package name.',
                type: 'boolean',
            },
            parallel: {
                group: 'Command Options:',
                describe: 'Execute command with unlimited concurrency, streaming prefixed output.',
                type: 'boolean',
            },
            'no-bail': {
                group: 'Command Options:',
                describe: 'Continue executing command despite non-zero exit in a given package.',
                type: 'boolean',
            },
            bail: {
                // proxy for --no-bail
                hidden: true,
                type: 'boolean',
            },
            // This option controls prefix for stream output so that it can be disabled to be friendly
            // to tools like Visual Studio Code to highlight the raw results
            'no-prefix': {
                group: 'Command Options:',
                describe: 'Do not prefix streaming output.',
                type: 'boolean',
            },
            prefix: {
                // proxy for --no-prefix
                hidden: true,
                type: 'boolean',
            },
            profile: {
                group: 'Command Options:',
                describe: 'Profile command executions and output performance profile to default location.',
                type: 'boolean',
            },
            'profile-location': {
                group: 'Command Options:',
                describe: 'Output performance profile to custom location instead of default project root.',
                type: 'string',
            },
            'cmd-dry-run': {
                group: 'Command Options:',
                describe: 'Displays the execution command that would be performed without executing it.',
                type: 'boolean',
            },
        });
        return (0, filter_options_1.filterOptions)(yargs);
    },
    handler: async (argv) => {
        try {
            // @ts-ignore
            // eslint-disable-next-line import/no-unresolved
            const { ExecCommand } = await Promise.resolve().then(() => __importStar(require('@lerna-lite/exec')));
            new ExecCommand(argv);
        }
        catch (err) {
            console.error(`"@lerna-lite/exec" is optional and was not found. Please install it with "npm install @lerna-lite/exec -D -W".`, err);
        }
    },
};
//# sourceMappingURL=cli-exec-commands.js.map