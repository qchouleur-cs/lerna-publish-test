"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const npmlog_1 = __importDefault(require("npmlog"));
const publish_1 = require("@lerna-lite/publish");
const cli_version_commands_1 = __importStar(require("./cli-version-commands"));
/**
 * @see https://github.com/yargs/yargs/blob/master/docs/advanced.md#providing-a-command-module
 */
function composeVersionOptions(yargs) {
    (0, cli_version_commands_1.addBumpPositional)(yargs, ['from-git', 'from-package']);
    cli_version_commands_1.default.builder(yargs, 'publish');
    return yargs;
}
exports.default = {
    command: 'publish [bump]',
    describe: 'Publish packages in the current project.',
    builder: (yargs) => {
        const opts = {
            c: {
                describe: 'Publish packages after every successful merge using the sha as part of the tag.',
                alias: 'canary',
                type: 'boolean',
            },
            // preid is copied from ../version/command because a whitelist for one option isn't worth it
            preid: {
                describe: 'Specify the prerelease identifier when publishing a prerelease',
                type: 'string',
                requiresArg: true,
                defaultDescription: 'alpha',
            },
            contents: {
                describe: 'Subdirectory to publish. Must apply to ALL packages.',
                type: 'string',
                requiresArg: true,
                defaultDescription: '.',
            },
            'dist-tag': {
                describe: 'Publish packages with the specified npm dist-tag',
                type: 'string',
                requiresArg: true,
            },
            'legacy-auth': {
                describe: 'Legacy Base64 Encoded username and password.',
                type: 'string',
            },
            'pre-dist-tag': {
                describe: 'Publish prerelease packages with the specified npm dist-tag',
                type: 'string',
                requiresArg: true,
            },
            'git-head': {
                describe: 'Explicit SHA to set as gitHead when packing tarballs, only allowed with "from-package" positional.',
                type: 'string',
                requiresArg: true,
            },
            'graph-type': {
                describe: 'Type of dependency to use when determining package hierarchy.',
                choices: ['all', 'dependencies'],
                defaultDescription: 'dependencies',
            },
            'ignore-prepublish': {
                describe: 'Disable deprecated "prepublish" lifecycle script',
                type: 'boolean',
            },
            'ignore-scripts': {
                describe: 'Disable all lifecycle scripts',
                type: 'boolean',
            },
            // TODO: (major) make --no-granular-pathspec the default
            'no-granular-pathspec': {
                describe: 'Do not reset changes file-by-file, but globally.',
                type: 'boolean',
            },
            'granular-pathspec': {
                // proxy for --no-granular-pathspec
                hidden: true,
                // describe: 'Reset changes file-by-file, not globally.',
                type: 'boolean',
            },
            otp: {
                describe: 'Supply a one-time password for publishing with two-factor authentication.',
                type: 'string',
                requiresArg: true,
            },
            registry: {
                describe: 'Use the specified registry for all npm client operations.',
                type: 'string',
                requiresArg: true,
            },
            'require-scripts': {
                describe: 'Execute ./scripts/prepublish.js and ./scripts/postpublish.js, relative to package root.',
                type: 'boolean',
            },
            'no-git-reset': {
                describe: 'Do not reset changes to working tree after publishing is complete.',
                type: 'boolean',
            },
            'git-reset': {
                // proxy for --no-git-reset
                hidden: true,
                type: 'boolean',
            },
            'temp-tag': {
                describe: 'Create a temporary tag while publishing.',
                type: 'boolean',
            },
            'no-verify-access': {
                // proxy for --verify-access
                describe: 'Do not verify package read-write access for current npm user.',
                type: 'boolean',
            },
            'verify-access': {
                describe: 'Verify package read-write access for current npm user.',
                type: 'boolean',
            },
            'workspace-strict-match': {
                describe: 'Strict match transform version numbers to an exact range (like "1.2.3") rather than with a caret (like ^1.2.3) when using `workspace:*`.',
                type: 'boolean',
            },
        };
        composeVersionOptions(yargs);
        yargs.options(opts);
        // 'unhide' duplicate options
        const { hiddenOptions } = yargs.getOptions();
        const sharedKeys = ['preid', 'y', 'ignore-scripts'];
        for (const sharedKey of sharedKeys) {
            hiddenOptions.splice(hiddenOptions.findIndex((k) => k === sharedKey), 1);
        }
        yargs.group(Object.keys(opts).concat(sharedKeys), 'Command Options:');
        return yargs
            .option('npm-tag', {
            // TODO: remove in next major release
            hidden: true,
            conflicts: 'dist-tag',
            type: 'string',
            requiresArg: true,
        })
            .option('verify-registry', {
            // TODO: remove in next major release
            hidden: true,
            type: 'boolean',
        })
            .option('skip-npm', {
            // TODO: remove in next major release
            // deprecation notice handled in initialize()
            hidden: true,
            type: 'boolean',
        })
            .check((argv) => {
            /* eslint-disable no-param-reassign */
            if (argv.npmTag) {
                argv.distTag = argv.npmTag;
                argv['dist-tag'] = argv.npmTag;
                delete argv.npmTag;
                delete argv['npm-tag'];
                npmlog_1.default.warn('deprecated', '--npm-tag has been renamed --dist-tag');
            }
            /* eslint-enable no-param-reassign */
            return argv;
        });
    },
    handler: (argv) => {
        return new publish_1.PublishCommand(argv);
    },
};
//# sourceMappingURL=cli-publish-commands.js.map