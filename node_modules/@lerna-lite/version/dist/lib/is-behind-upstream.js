"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.countLeftRight = exports.updateRemote = exports.isBehindUpstream = void 0;
const npmlog_1 = __importDefault(require("npmlog"));
const core_1 = require("@lerna-lite/core");
function isBehindUpstream(gitRemote, branch, opts, gitDryRun = false) {
    npmlog_1.default.silly('isBehindUpstream', '');
    updateRemote(opts, gitDryRun);
    const remoteBranch = `${gitRemote}/${branch}`;
    const [behind, ahead] = countLeftRight(`${remoteBranch}...${branch}`, opts, gitDryRun);
    npmlog_1.default.silly('isBehindUpstream', `${branch} is behind ${remoteBranch} by ${behind} commit(s) and ahead by ${ahead}`);
    return Boolean(behind);
}
exports.isBehindUpstream = isBehindUpstream;
function updateRemote(opts, gitDryRun = false) {
    // git fetch, but for everything
    (0, core_1.execSync)('git', ['remote', 'update'], opts, gitDryRun);
}
exports.updateRemote = updateRemote;
function countLeftRight(symmetricDifference, opts, gitDryRun = false) {
    const stdout = (0, core_1.execSync)('git', ['rev-list', '--left-right', '--count', symmetricDifference], opts, gitDryRun);
    return stdout.split('\t').map((val) => parseInt(val, 10));
}
exports.countLeftRight = countLeftRight;
//# sourceMappingURL=is-behind-upstream.js.map