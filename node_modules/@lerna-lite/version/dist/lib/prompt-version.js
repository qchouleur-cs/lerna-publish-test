"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptVersion = exports.makePromptVersion = void 0;
const semver_1 = __importDefault(require("semver"));
const core_1 = require("@lerna-lite/core");
function makePromptVersion(resolvePrereleaseId) {
    return (node) => promptVersion(node.version, node.name, resolvePrereleaseId(node.prereleaseId));
}
exports.makePromptVersion = makePromptVersion;
/**
 * A predicate that prompts user to select/construct a version bump.
 * It can be run per-package (independent) or globally (fixed).
 *
 * @param {PackageGraphNode|Object} node The metadata to process
 * @property {String} currentVersion
 * @property {String} name (Only used in independent mode)
 * @property {String} prereleaseId
 */
async function promptVersion(currentVersion, name, prereleaseId) {
    const patch = semver_1.default.inc(currentVersion, 'patch');
    const minor = semver_1.default.inc(currentVersion, 'minor');
    const major = semver_1.default.inc(currentVersion, 'major');
    const prepatch = semver_1.default.inc(currentVersion, 'prepatch', prereleaseId);
    const preminor = semver_1.default.inc(currentVersion, 'preminor', prereleaseId);
    const premajor = semver_1.default.inc(currentVersion, 'premajor', prereleaseId);
    const message = `Select a new version ${name ? `for ${name} ` : ''}(currently ${currentVersion})`;
    const choice = await (0, core_1.promptSelectOne)(message, {
        choices: [
            { value: patch, name: `Patch (${patch})` },
            { value: minor, name: `Minor (${minor})` },
            { value: major, name: `Major (${major})` },
            { value: prepatch, name: `Prepatch (${prepatch})` },
            { value: preminor, name: `Preminor (${preminor})` },
            { value: premajor, name: `Premajor (${premajor})` },
            { value: 'PRERELEASE', name: 'Custom Prerelease' },
            { value: 'CUSTOM', name: 'Custom Version' },
        ],
    });
    if (choice === 'CUSTOM') {
        return (0, core_1.promptTextInput)('Enter a custom version', {
            filter: semver_1.default.valid,
            // semver.valid() always returns null with invalid input
            validate: (v) => v !== null || 'Must be a valid semver version',
        });
    }
    if (choice === 'PRERELEASE') {
        const defaultVersion = semver_1.default.inc(currentVersion, 'prerelease', prereleaseId);
        const prompt = `(default: "${prereleaseId}", yielding ${defaultVersion})`;
        return (0, core_1.promptTextInput)(`Enter a prerelease identifier ${prompt}`, {
            filter: (v) => semver_1.default.inc(currentVersion, 'prerelease', v || prereleaseId),
        });
    }
    return choice;
}
exports.promptVersion = promptVersion;
//# sourceMappingURL=prompt-version.js.map